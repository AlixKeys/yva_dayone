#!/usr/bin/env python3
"""
Script Python pour l'orientation YVA utilisant Mistral AI
Ce script re√ßoit les donn√©es du formulaire et retourne une recommandation personnalis√©e
"""

import json
import sys
import os
import traceback

# Configuration de la cl√© API Mistral
MISTRAL_API_KEY = "N3MTpD4hcWN560kPstGLNBxRdMBKyTXf"

def generate_recommendation(user_data):
    """
    G√©n√®re une recommandation d'orientation bas√©e sur les donn√©es utilisateur
    """
    try:
        # Import de Mistral (avec gestion d'erreur si pas install√©)
        try:
            from mistralai import Mistral
        except ImportError:
            # Fallback si Mistral n'est pas install√© - simulation pour la d√©mo
            return generate_fallback_recommendation(user_data)
        
        # Cr√©ation du client Mistral
        client = Mistral(api_key=MISTRAL_API_KEY)
        
        # Construction du prompt syst√®me adapt√© au contexte togolais
        prompt = f"""
Tu es YVA, un assistant virtuel sp√©cialis√© dans l'orientation scolaire et professionnelle pour les jeunes Togolais √¢g√©s de 12 √† 25 ans. 

Ton r√¥le est de fournir des recommandations personnalis√©es, motivantes et adapt√©es aux r√©alit√©s du Togo, en tenant compte :
- Des fili√®res scolaires togolaises (S√©rie D, C, L, F)
- Des m√©tiers locaux et opportunit√©s au Togo
- Des contraintes g√©ographiques et socio-√©conomiques
- Des ressources disponibles (acc√®s internet, smartphone)
- Du contexte familial et culturel

Donn√©es de l'utilisateur :
{json.dumps(user_data, indent=2, ensure_ascii=False)}

Fournis une recommandation structur√©e qui inclut :

1. **üéì Orientation scolaire recommand√©e** : Quelle fili√®re/s√©rie choisir et pourquoi
2. **üíº M√©tiers adapt√©s** : 3-4 m√©tiers concrets correspondant au profil
3. **üåü Justification** : Pourquoi ces recommandations bas√©es sur les r√©ponses
4. **üìö Prochaines √©tapes** : Actions concr√®tes avec YVA (mini-formations)
5. **üí° Conseil sp√©cial** : Un conseil personnalis√© selon le contexte

R√©ponds en fran√ßais, avec un ton motivant, bienveillant et adapt√© √† un jeune togolais. 
√âvite les g√©n√©ralit√©s et sois sp√©cifique au contexte togolais.
Utilise des emojis pour rendre la r√©ponse plus engageante.
"""

        # Appel √† l'API Mistral
        response = client.chat.complete(
            model="mistral-large-latest",
            messages=[
                {
                    "role": "system", 
                    "content": prompt
                }
            ],
            temperature=0.7,
            max_tokens=1500
        )
        
        # Extraction de la recommandation
        recommendation = response.choices[0].message.content
        
        return {
            "success": True,
            "recommendation": recommendation
        }
        
    except Exception as e:
        # Log l'erreur pour le d√©bogage
        error_msg = f"Erreur Mistral API: {str(e)}"
        print(f"ERROR: {error_msg}", file=sys.stderr)
        
        # Retourner une recommandation de fallback
        return generate_fallback_recommendation(user_data)

def generate_fallback_recommendation(user_data):
    """
    G√©n√®re une recommandation de base si Mistral n'est pas disponible
    """
    try:
        age = user_data.get('age', 0)
        niveau = user_data.get('niveauEtude', '')
        matieres_sci = user_data.get('matieresSci', '')
        matieres_litt = user_data.get('matieresLitt', '')
        matieres_pref = user_data.get('matieresPref', [])
        aimer_faire = user_data.get('aimerFaire', [])
        localite = user_data.get('localite', '')
        entrepreneuriat = user_data.get('entrepreneuriat', '')
        
        # Logique de recommandation basique
        if matieres_sci == "√âlev√©":
            orientation = "S√©rie D (Sciences exp√©rimentales)"
            metiers = ["M√©decin", "Ing√©nieur", "Pharmacien", "V√©t√©rinaire"]
        elif matieres_litt == "√âlev√©":
            orientation = "S√©rie L (Litt√©raire)"
            metiers = ["Professeur", "Journaliste", "Avocat", "Traducteur"]
        else:
            orientation = "S√©rie C (Math√©matiques)"
            metiers = ["Comptable", "Informaticien", "Banquier", "Statisticien"]
        
        # Ajustement selon les pr√©f√©rences
        if "Soigner" in aimer_faire:
            metiers = ["M√©decin", "Infirmier", "Pharmacien", "Kin√©sith√©rapeute"]
        elif "Enseigner" in aimer_faire:
            metiers = ["Professeur", "Formateur", "√âducateur", "Directeur d'√©cole"]
        elif "Cr√©er" in aimer_faire:
            metiers = ["Designer", "Architecte", "Artiste", "D√©veloppeur"]
        
        recommendation = f"""üéØ **Recommandation personnalis√©e YVA**

Bonjour ! Bas√© sur votre profil, voici ma recommandation :

**üéì Orientation scolaire recommand√©e :**
{orientation}

**üíº M√©tiers adapt√©s √† votre profil :**
{chr(10).join([f"‚Ä¢ {metier}" for metier in metiers[:4]])}

**üåü Pourquoi cette recommandation ?**
Vos comp√©tences en {matieres_sci.lower() if matieres_sci == "√âlev√©" else "litt√©rature" if matieres_litt == "√âlev√©" else "math√©matiques"} et votre int√©r√™t pour {", ".join(matieres_pref[:2]) if matieres_pref else "les √©tudes"} montrent une affinit√© naturelle pour ce domaine.

**üìö Prochaines √©tapes avec YVA :**
‚úÖ Explorez nos mini-formations en {matieres_pref[0] if matieres_pref else "sciences"}
‚úÖ Renforcez vos comp√©tences avec nos modules pratiques
‚úÖ D√©couvrez les opportunit√©s au Togo dans votre r√©gion ({localite})

**üí° Conseil sp√©cial :**
{f"Votre int√©r√™t pour l'entrepreneuriat est un atout ! Consid√©rez des formations en gestion d'entreprise." if entrepreneuriat == "Oui" else "N'h√©sitez pas √† explorer l'entrepreneuriat, c'est une excellente voie au Togo !"}

Bonne chance dans votre parcours ! üöÄ"""

        return {
            "success": True,
            "recommendation": recommendation
        }
        
    except Exception as e:
        return {
            "success": False,
            "error": f"Erreur lors de la g√©n√©ration de la recommandation de base : {str(e)}"
        }

def main():
    """
    Fonction principale du script
    """
    try:
        # Lecture des donn√©es depuis stdin
        input_data = sys.stdin.read().strip()
        
        if not input_data:
            raise ValueError("Aucune donn√©e re√ßue")
        
        # Parsing des donn√©es JSON
        user_data = json.loads(input_data)
        
        # G√©n√©ration de la recommandation
        result = generate_recommendation(user_data)
        
        # Retour du r√©sultat en JSON
        print(json.dumps(result, ensure_ascii=False, indent=2))
        
    except json.JSONDecodeError as e:
        error_result = {
            "success": False,
            "error": f"Erreur de format JSON : {str(e)}"
        }
        print(json.dumps(error_result, ensure_ascii=False))
        sys.exit(1)
        
    except Exception as e:
        error_result = {
            "success": False,
            "error": f"Erreur inattendue : {str(e)}"
        }
        print(json.dumps(error_result, ensure_ascii=False))
        print(f"TRACEBACK: {traceback.format_exc()}", file=sys.stderr)
        sys.exit(1)

if __name__ == "__main__":
    main()
