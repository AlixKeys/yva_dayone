from flask import Flask, request, jsonify
from flask_cors import CORS
from mistralai import Mistral
import os
import time
from dotenv import load_dotenv
load_dotenv()


# Charger la cl√© API depuis une variable d'environnement
MISTRAL_API_KEY = os.getenv("MISTRAL_API_KEY")

app = Flask(__name__)
CORS(app)  # Autorise les appels depuis Next.js

# Fonction de g√©n√©ration de recommandation
def generate_recommendation(age, sexe, localite, langues, niveau_etude, filiere, matieres_scientifiques, matieres_litteraires,
                           statut, matieres_preferees, activites_preferees, travail_preference, aimes, type_travail,
                           metier_en_tete, metier, objectif, entrepreneuriat, smartphone, internet, activite_parents,
                           apprentissage, competence_existante):
    try:
        user_data = {
            "√Çge": age,
            "Sexe": sexe,
            "Localit√©": localite,
            "Langue parl√©e": ", ".join(langues) if langues else "Aucune",
            "Niveau d‚Äô√©tude actuel": niveau_etude,
            "Fili√®re suivie": filiere,
            "Mati√®res scientifiques": matieres_scientifiques,
            "Mati√®res litt√©raires": matieres_litteraires,
            "Tu es actuellement": statut,
            "Mati√®re(s) pr√©f√©r√©e(s)": ", ".join(matieres_preferees) if matieres_preferees else "Aucune",
            "Activit√©(s) pr√©f√©r√©e(s)": ", ".join(activites_preferees) if activites_preferees else "Aucune",
            "Pr√©f√®res-tu travailler": travail_preference,
            "Tu aimes": ", ".join(aimes) if aimes else "Aucune",
            "Type de travail qui t‚Äôattire": type_travail,
            "As-tu un m√©tier en t√™te ?": metier_en_tete,
            "M√©tier": metier if metier_en_tete == "Oui" else "",
            "Tu veux": objectif,
            "Es-tu int√©ress√©(e) par l‚Äôentrepreneuriat ?": entrepreneuriat,
            "Acc√®s √† un smartphone": smartphone,
            "Acc√®s internet r√©gulier ?": internet,
            "Activit√© des parents": activite_parents,
            "Tu apprends mieux en": ", ".join(apprentissage) if apprentissage else "Aucune",
            "As-tu d√©j√† une comp√©tence ?": competence_existante or "Aucune"
        }

prompt = f"""
Tu es YVA, un assistant virtuel pour les jeunes Togolais de 12 √† 25 ans. Ta mission est de leur proposer une orientation scolaire ou professionnelle **ultra-contextualis√©e au Togo uniquement**.

üéØ Consignes claires :
- R√©ponds **en fran√ßais**, de mani√®re **structur√©e, bien lisible**.
- Utilise **uniquement** des **fili√®res, m√©tiers, institutions, formations, contextes et ressources disponibles au Togo**.
- Propose **3 mini-formations ou actions concr√®tes locales** (ex: ANPE Togo, Institut National, artisanat local, appui communal, dispositifs togolais...).
- Le ton doit √™tre **bienveillant, accessible, motivant et adapt√© aux r√©alit√©s locales** (acc√®s Internet limit√©, environnement rural, etc.).
- Ne propose **aucun service √©tranger, ni √©cole internationale, ni plateforme non disponible au Togo.**
- Termine par **une phrase de motivation locale**.

Voici les donn√©es du jeune :
{user_data}

üß† Structure ta r√©ponse comme ceci :

1. **Profil r√©sum√©**
(3-4 lignes pour d√©crire la personne)

2. **Suggestion de fili√®re ou m√©tier**
(Utilise un mot en gras et explique le lien avec ses r√©ponses)

3. **Pourquoi ce choix**
(Analyse br√®ve des r√©ponses coh√©rentes)

4. **Mini-formations ou services disponibles au Togo**
(3 suggestions locales, pratiques et accessibles)

5. **Message de motivation**
(1 phrase inspirante en lien avec la jeunesse togolaise)

Sois bref, efficace et **100 % ancr√© dans le Togo**.
"""
Tu es YVA, un assistant virtuel pour les jeunes Togolais (12-25 ans). R√©ponds en fran√ßais, avec un ton motivant, clair, et structur√©. Tiens compte des r√©alit√©s locales (ex : fili√®res scolaires comme la s√©rie D, m√©tiers comme agriculture ou commerce, acc√®s limit√© √† Internet...).

Voici les informations du jeune : {user_data}

G√©n√®re une recommandation dans ce format :

1. **Profil du jeune** : (R√©sum√© rapide des donn√©es utiles)
2. **Fili√®re ou m√©tier recommand√©(e)** : (avec une explication adapt√©e)
3. **Pourquoi ce choix ?** : (arguments li√©s √† ses r√©ponses)
4. **Mini-formations YVA propos√©es** : (3 courtes suggestions adapt√©es √† son profil)
5. **Mot de motivation** : (phrase inspirante, simple et locale)

√âvite les phrases longues ou trop g√©n√©rales. Sois chaleureux, accessible, et motivant.        """

        client = Mistral(api_key=MISTRAL_API_KEY)
        start_time = time.time()
        response = client.chat.complete(
            model="mistral-large-latest",
            messages=[{"role": "system", "content": prompt}]
        )
        elapsed_time = time.time() - start_time
        if elapsed_time > 30:
            return "Erreur : D√©lai d'attente d√©pass√©."
        return response.choices[0].message.content
    except Exception as e:
        return f"Erreur : {str(e)}"

@app.route("/api/orientation", methods=["POST"])
def orientation():
    data = request.json
    try:
        result = generate_recommendation(*data["data"])
        return jsonify({"data": [result]})
    except Exception as e:
        return jsonify({"error": str(e)}), 500

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=7860)
